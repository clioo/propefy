
version: '3.4'

services:

  app:
    image: propefy/propefy:prod
    hostname: app
    command: >
        sh -c "python manage.py wait_for_db  &&
              python manage.py migrate &&
              gunicorn propefy.wsgi --access-logfile - --workers 3 --limit-request-line 32768 --limit-request-fields 1000 -b 0.0.0.0:8000"
    deploy:
      placement:
        constraints:
          - node.role == manager
      mode: replicated
      replicas: 4
      update_config:
        order: start-first
        failure_action: rollback
        delay: 5s
    tty: true
    stdin_open: true
    networks:
      - main
    ports:
      - "8000:8000"
    depends_on:
      - redis
    volumes:
      - static:/vol/web/static

  nginx:
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    deploy:
      placement:
        constraints:
          - node.role == manager
    depends_on:
      - app
      - celery_worker_utils
      - redis
      - rabbitmq
    image: nginx:alpine
    networks:
      - main
    ports:
      - "80:80"
      - "443:443"
    restart: on-failure
    volumes:
      # - ./nginx/app.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - /bin/wait-for:/bin/wait-for
      - static:/vol/web/static
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    depends_on: 
      - nginx
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  celery_worker_utils:
    command: sh -c "celery -A propefy worker -l info --concurrency=10"
    depends_on:
      - app
      - rabbitmq
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
    hostname: celery_worker_utils
    image: propefy/propefy:prod
    networks:
      - main
    restart: on-failure
    volumes:
     - ./app:/app

  celery_beat:
    command: sh -c "celery -A propefy beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - app
      - rabbitmq
    deploy:
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.50'
    hostname: celery_beat
    image: propefy/propefy:prod
    networks:
      - main
    volumes:
      - ./app:/app
    restart: on-failure

  redis:
    image: redis:latest
    expose:
      - '6379'
    networks:
      - main

  flower:
    image: propefy/propefy:prod
    command:  flower -A propefy --port=5555
    networks:
      - main
    ports:
      - 5555:5555
    environment:
      - DEBUG=1
      - SECRET_KEY=dbaa1_i7%*3r9-=z-+_mz4r-!qeed@(-a_r(g@k8jo8y3r27%m
      - DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]
      - CELERY_BROKER=pyamqp://rabbitmq:5672
    depends_on:
      - app
      - redis
      - celery_worker_utils

networks:
  main:
volumes:
  static:
  data:
  redis_data: